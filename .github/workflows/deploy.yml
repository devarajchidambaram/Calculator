name: Deploy (Self-Hosted)

on:
  workflow_run:
    workflows: [ CI ]
    types: [ completed ]
  workflow_dispatch:

jobs:
  deploy:
    # Target your Actions Runner installed on this machine
    runs-on: self-hosted
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Stop if CI failed
        if: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.conclusion != 'success' }}
        run: |
          Write-Host "CI did not succeed (status: $env:CI_STATUS). Skipping deploy."
        env:
          CI_STATUS: ${{ github.event.workflow_run.conclusion }}
        shell: pwsh

      - name: Set up Docker Buildx (optional)
        uses: docker/setup-buildx-action@v3


      - name: Docker versions
        run: |
          docker version
          docker compose version 2>$null; if ($LASTEXITCODE -ne 0) { docker-compose version }

      - name: Build and start with Docker Compose
        working-directory: .
        run: |
          $ErrorActionPreference = 'Continue'
          # Try new v2 CLI first, then fallback to docker-compose
          docker compose down 2>$null; if ($LASTEXITCODE -ne 0) { docker-compose down 2>$null }
          docker compose build --no-cache 2>$null; if ($LASTEXITCODE -ne 0) { docker-compose build --no-cache }
          docker compose up -d --force-recreate 2>$null; if ($LASTEXITCODE -ne 0) { docker-compose up -d --force-recreate }

      - name: Verify service health
        run: |
          Write-Host "Waiting for API to be healthy..."
          $success = $false
          for ($i = 0; $i -lt 30; $i++) {
            try {
              $resp = Invoke-WebRequest -Uri "http://localhost:3000/health" -UseBasicParsing -TimeoutSec 2 -ErrorAction Stop
              if ($resp.StatusCode -ge 200 -and $resp.StatusCode -lt 400) { $success = $true; break }
            } catch {
              try {
                $resp2 = Invoke-WebRequest -Uri "http://localhost:3000" -UseBasicParsing -TimeoutSec 2 -ErrorAction Stop
                if ($resp2.StatusCode -ge 200 -and $resp2.StatusCode -lt 400) { $success = $true; break }
              } catch {}
            }
            Start-Sleep -Seconds 2
          }
          if (-not $success) { Write-Error "Service failed to respond in time" }

      - name: Show container logs on failure
        if: failure()
        run: |
          Write-Host "Showing recent container logs..."
          docker ps --format "table {{.ID}}\t{{.Names}}\t{{.Status}}\t{{.Ports}}"
          docker compose logs --tail=200 2>$null; if ($LASTEXITCODE -ne 0) { docker-compose logs --tail=200 }


